{"version":3,"sources":["components/Jumbotron/index.js","components/Cards/index.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","props","className","score","highScore","Cards","onClick","src","drink","image","alt","name","data-drinkid","id","App","state","drinks","clickedDrinks","cardHandler","test","target","getAttribute","console","log","arrayShuffler","includes","setState","alert","drinkCopyArray","sort","Math","random","this","map","index","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"okDAwBeA,MArBf,SAAmBC,GACjB,OACE,yBAAKC,UAAU,wCACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,4CAAd,oBACmB,uBAAGA,UAAU,yBAEhC,uBAAGA,UAAU,qCAAb,uFAKA,yBAAKA,UAAU,4DACb,yBAAKA,UAAU,OAAf,UAA6BD,EAAME,OACnC,yBAAKD,UAAU,OAAf,eAAkCD,EAAMG,e,MCCnCC,MAff,SAAeJ,GACb,OACE,yBAAKC,UAAU,SACb,yBAAKA,UAAU,OAAOI,QAASL,EAAMK,SACnC,yBACEC,IAAKN,EAAMO,MAAMC,MACjBP,UAAU,eACVQ,IAAKT,EAAMO,MAAMG,KACjBC,eAAcX,EAAMO,MAAMK,Q,OCqDrBC,E,4MA1DbC,MAAQ,CACNC,OAAQA,EACRb,MAAO,EACPC,UAAW,EACXa,cAAe,I,EAGjBC,YAAc,SAACL,GACb,IAAIM,EAAON,EAAGO,OAAOC,aAAa,gBAClCC,QAAQC,IAAIJ,GACZ,EAAKK,gBACD,EAAKT,MAAME,cAAcQ,SAASN,IACpCG,QAAQC,IAAI,SAEd,EAAKG,SAAS,CACZvB,MAAO,EAAKY,MAAMZ,MAAQ,EAC1Bc,cAAe,KAEF,EAAKF,MAAMZ,OACV,KAEdwB,MAAM,UACN,EAAKD,SAAS,CACZvB,MAAO,EACPC,UAAW,EAAKW,MAAMZ,U,EAK5BqB,cAAgB,WACd,IAAII,EAAc,YAAO,EAAKb,MAAMC,QACpCY,EAAeC,MAAK,kBAAMC,KAAKC,SAAW,MAC1C,EAAKL,SAAS,CACZV,OAAQY,K,uDAMF,IAAD,OACP,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,CAAWC,MAAO6B,KAAKjB,MAAMZ,MAAOC,UAAW4B,KAAKjB,MAAMX,YAE1D,yBAAKF,UAAU,aACb,yBAAKA,UAAU,OACZ8B,KAAKjB,MAAMC,OAAOiB,KAAI,SAACzB,EAAO0B,GAC7B,OACE,kBAAC,EAAD,CAAOC,IAAKD,EAAO1B,MAAOA,EAAOF,QAAS,EAAKY,wB,GAjD7CkB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.9ec7a56f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron(props) {\n  return (\n    <div className=\"jumbotron jumbotron-fluid text-white\">\n      <div className=\"container\">\n        <h1 className=\"display-4 text-center font-weight-bolder\">\n          Drink Enthusiast!<i className=\"fas fa-glass-cheers\"></i>\n        </h1>\n        <p className=\"lead text-center font-weight-bold\">\n          How well can you remember the drinks you drank? Choose the same drink\n          and you lose!\n        </p>\n\n        <div className=\"row justify-content-between text-center font-weight-bold\">\n          <div className=\"col\">Score: {props.score}</div>\n          <div className=\"col\">High Score: {props.highScore}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Cards(props) {\n  return (\n    <div className=\"col-3\">\n      <div className=\"card\" onClick={props.onClick}>\n        <img\n          src={props.drink.image}\n          className=\"card-img-top\"\n          alt={props.drink.name}\n          data-drinkid={props.drink.id}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Cards;\n","import React, { Component } from \"react\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Cards from \"./components/Cards\";\nimport drinks from \"./drinks.json\";\n\nclass App extends Component {\n  state = {\n    drinks: drinks,\n    score: 0,\n    highScore: 0,\n    clickedDrinks: [],\n  };\n\n  cardHandler = (id) => {\n    let test = id.target.getAttribute(\"data-drinkid\");\n    console.log(test);\n    this.arrayShuffler();\n    if (this.state.clickedDrinks.includes(test)) {\n      console.log(\"LOSER\");\n    }\n    this.setState({\n      score: this.state.score + 1,\n      clickedDrinks: [],\n    });\n    let newscore = this.state.score;\n    if (newscore >= 12) {\n      // console.log(\"you won\");\n      alert(\"WINNER\");\n      this.setState({\n        score: 0,\n        highScore: this.state.score,\n      });\n    }\n  };\n\n  arrayShuffler = () => {\n    var drinkCopyArray = [...this.state.drinks];\n    drinkCopyArray.sort(() => Math.random() - 0.5);\n    this.setState({\n      drinks: drinkCopyArray,\n    });\n\n    // console.log(drinks);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Jumbotron score={this.state.score} highScore={this.state.highScore} />\n\n        <div className=\"container\">\n          <div className=\"row\">\n            {this.state.drinks.map((drink, index) => {\n              return (\n                <Cards key={index} drink={drink} onClick={this.cardHandler} />\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}